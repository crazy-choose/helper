// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.6
// source: thost_trader.proto

// 指定proto版本

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 持仓日期类型枚举
type PosDateType int32

const (
	PosDateType_TODAY   PosDateType = 0 // 今日(49) - 原始值 '1'
	PosDateType_HISTORY PosDateType = 1 // 旧仓(50) - 原始值 '2'
)

// Enum value maps for PosDateType.
var (
	PosDateType_name = map[int32]string{
		0: "TODAY",
		1: "HISTORY",
	}
	PosDateType_value = map[string]int32{
		"TODAY":   0,
		"HISTORY": 1,
	}
)

func (x PosDateType) Enum() *PosDateType {
	p := new(PosDateType)
	*p = x
	return p
}

func (x PosDateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PosDateType) Descriptor() protoreflect.EnumDescriptor {
	return file_thost_trader_proto_enumTypes[0].Descriptor()
}

func (PosDateType) Type() protoreflect.EnumType {
	return &file_thost_trader_proto_enumTypes[0]
}

func (x PosDateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PosDateType.Descriptor instead.
func (PosDateType) EnumDescriptor() ([]byte, []int) {
	return file_thost_trader_proto_rawDescGZIP(), []int{0}
}

type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                       string  `protobuf:"bytes,1,opt,name=broker_iD,json=brokerID,proto3" json:"broker_iD,omitempty"`                                                                              // 经纪公司代码
	AccountID                      string  `protobuf:"bytes,2,opt,name=account_iD,json=accountID,proto3" json:"account_iD,omitempty"`                                                                           // 投资者帐号
	PreMortgage                    float64 `protobuf:"fixed64,3,opt,name=pre_mortgage,json=preMortgage,proto3" json:"pre_mortgage,omitempty"`                                                                   // 上次质押金额
	PreCredit                      float64 `protobuf:"fixed64,4,opt,name=pre_credit,json=preCredit,proto3" json:"pre_credit,omitempty"`                                                                         // 上次信用额度
	PreDeposit                     float64 `protobuf:"fixed64,5,opt,name=pre_deposit,json=preDeposit,proto3" json:"pre_deposit,omitempty"`                                                                      // 上次存款额
	PreBalance                     float64 `protobuf:"fixed64,6,opt,name=pre_balance,json=preBalance,proto3" json:"pre_balance,omitempty"`                                                                      // 上次结算准备金
	PreMargin                      float64 `protobuf:"fixed64,7,opt,name=pre_margin,json=preMargin,proto3" json:"pre_margin,omitempty"`                                                                         // 上次占用的保证金
	InterestBase                   float64 `protobuf:"fixed64,8,opt,name=interest_base,json=interestBase,proto3" json:"interest_base,omitempty"`                                                                // 利息基数
	Interest                       float64 `protobuf:"fixed64,9,opt,name=interest,proto3" json:"interest,omitempty"`                                                                                            // 利息收入
	Deposit                        float64 `protobuf:"fixed64,10,opt,name=deposit,proto3" json:"deposit,omitempty"`                                                                                             // 入金金额
	Withdraw                       float64 `protobuf:"fixed64,11,opt,name=withdraw,proto3" json:"withdraw,omitempty"`                                                                                           // 出金金额
	FrozenMargin                   float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`                                                               // 冻结的保证金
	FrozenCash                     float64 `protobuf:"fixed64,13,opt,name=frozen_cash,json=frozenCash,proto3" json:"frozen_cash,omitempty"`                                                                     // 冻结的资金
	FrozenCommission               float64 `protobuf:"fixed64,14,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`                                                   // 冻结的手续费
	CurrMargin                     float64 `protobuf:"fixed64,15,opt,name=curr_margin,json=currMargin,proto3" json:"curr_margin,omitempty"`                                                                     // 当前保证金总额
	CashIn                         float64 `protobuf:"fixed64,16,opt,name=cash_in,json=cashIn,proto3" json:"cash_in,omitempty"`                                                                                 // 资金差额
	Commission                     float64 `protobuf:"fixed64,17,opt,name=commission,proto3" json:"commission,omitempty"`                                                                                       // 手续费
	CloseProfit                    float64 `protobuf:"fixed64,18,opt,name=close_profit,json=closeProfit,proto3" json:"close_profit,omitempty"`                                                                  // 平仓盈亏
	PositionProfit                 float64 `protobuf:"fixed64,19,opt,name=position_profit,json=positionProfit,proto3" json:"position_profit,omitempty"`                                                         // 持仓盈亏
	Balance                        float64 `protobuf:"fixed64,20,opt,name=balance,proto3" json:"balance,omitempty"`                                                                                             // 期货结算准备金
	Available                      float64 `protobuf:"fixed64,21,opt,name=available,proto3" json:"available,omitempty"`                                                                                         // 可用资金
	WithdrawQuota                  float64 `protobuf:"fixed64,22,opt,name=withdraw_quota,json=withdrawQuota,proto3" json:"withdraw_quota,omitempty"`                                                            // 可取资金
	Reserve                        float64 `protobuf:"fixed64,23,opt,name=reserve,proto3" json:"reserve,omitempty"`                                                                                             // 基本准备金
	TradingDay                     string  `protobuf:"bytes,24,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                                                       // 交易日
	SettlementID                   int32   `protobuf:"varint,25,opt,name=settlement_iD,json=settlementID,proto3" json:"settlement_iD,omitempty"`                                                                // 结算编号
	Credit                         float64 `protobuf:"fixed64,26,opt,name=credit,proto3" json:"credit,omitempty"`                                                                                               // 信用额度
	Mortgage                       float64 `protobuf:"fixed64,27,opt,name=mortgage,proto3" json:"mortgage,omitempty"`                                                                                           // 质押金额
	ExchangeMargin                 float64 `protobuf:"fixed64,28,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchange_margin,omitempty"`                                                         // 交易所保证金
	DeliveryMargin                 float64 `protobuf:"fixed64,29,opt,name=delivery_margin,json=deliveryMargin,proto3" json:"delivery_margin,omitempty"`                                                         // 投资者交割保证金
	ExchangeDeliveryMargin         float64 `protobuf:"fixed64,30,opt,name=exchange_delivery_margin,json=exchangeDeliveryMargin,proto3" json:"exchange_delivery_margin,omitempty"`                               // 交易所交割保证金
	ReserveBalance                 float64 `protobuf:"fixed64,31,opt,name=reserve_balance,json=reserveBalance,proto3" json:"reserve_balance,omitempty"`                                                         // 保底期货结算准备金
	CurrencyID                     string  `protobuf:"bytes,32,opt,name=currency_iD,json=currencyID,proto3" json:"currency_iD,omitempty"`                                                                       // 币种代码
	PreFundMortgageIn              float64 `protobuf:"fixed64,33,opt,name=pre_fund_mortgage_in,json=preFundMortgageIn,proto3" json:"pre_fund_mortgage_in,omitempty"`                                            // 上次货币质入金额
	PreFundMortgageOut             float64 `protobuf:"fixed64,34,opt,name=pre_fund_mortgage_out,json=preFundMortgageOut,proto3" json:"pre_fund_mortgage_out,omitempty"`                                         // 上次货币质出金额
	FundMortgageIn                 float64 `protobuf:"fixed64,35,opt,name=fund_mortgage_in,json=fundMortgageIn,proto3" json:"fund_mortgage_in,omitempty"`                                                       // 货币质入金额
	FundMortgageOut                float64 `protobuf:"fixed64,36,opt,name=fund_mortgage_out,json=fundMortgageOut,proto3" json:"fund_mortgage_out,omitempty"`                                                    // 货币质出金额
	FundMortgageAvailable          float64 `protobuf:"fixed64,37,opt,name=fund_mortgage_available,json=fundMortgageAvailable,proto3" json:"fund_mortgage_available,omitempty"`                                  // 货币质押余额
	MortgageableFund               float64 `protobuf:"fixed64,38,opt,name=mortgageable_fund,json=mortgageableFund,proto3" json:"mortgageable_fund,omitempty"`                                                   // 可质押货币金额
	SpecProductMargin              float64 `protobuf:"fixed64,39,opt,name=spec_product_margin,json=specProductMargin,proto3" json:"spec_product_margin,omitempty"`                                              // 特殊产品占用保证金
	SpecProductFrozenMargin        float64 `protobuf:"fixed64,40,opt,name=spec_product_frozen_margin,json=specProductFrozenMargin,proto3" json:"spec_product_frozen_margin,omitempty"`                          // 特殊产品冻结保证金
	SpecProductCommission          float64 `protobuf:"fixed64,41,opt,name=spec_product_commission,json=specProductCommission,proto3" json:"spec_product_commission,omitempty"`                                  // 特殊产品手续费
	SpecProductFrozenCommission    float64 `protobuf:"fixed64,42,opt,name=spec_product_frozen_commission,json=specProductFrozenCommission,proto3" json:"spec_product_frozen_commission,omitempty"`              // 特殊产品冻结手续费
	SpecProductPositionProfit      float64 `protobuf:"fixed64,43,opt,name=spec_product_position_profit,json=specProductPositionProfit,proto3" json:"spec_product_position_profit,omitempty"`                    // 特殊产品持仓盈亏
	SpecProductCloseProfit         float64 `protobuf:"fixed64,44,opt,name=spec_product_close_profit,json=specProductCloseProfit,proto3" json:"spec_product_close_profit,omitempty"`                             // 特殊产品平仓盈亏
	SpecProductPositionProfitByAlg float64 `protobuf:"fixed64,45,opt,name=spec_product_position_profit_by_alg,json=specProductPositionProfitByAlg,proto3" json:"spec_product_position_profit_by_alg,omitempty"` // 根据持仓盈亏算法计算的特殊产品持仓盈亏
	SpecProductExchangeMargin      float64 `protobuf:"fixed64,46,opt,name=spec_product_exchange_margin,json=specProductExchangeMargin,proto3" json:"spec_product_exchange_margin,omitempty"`                    // 特殊产品交易所保证金
	BizType                        int32   `protobuf:"varint,47,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`                                                                               // 业务类型（byte→int32）
	FrozenSwap                     float64 `protobuf:"fixed64,48,opt,name=frozen_swap,json=frozenSwap,proto3" json:"frozen_swap,omitempty"`                                                                     // 延时换汇冻结金额
	RemainSwap                     float64 `protobuf:"fixed64,49,opt,name=remain_swap,json=remainSwap,proto3" json:"remain_swap,omitempty"`                                                                     // 剩余换汇额度
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thost_trader_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thost_trader_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_thost_trader_proto_rawDescGZIP(), []int{0}
}

func (x *AccountInfo) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *AccountInfo) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *AccountInfo) GetPreMortgage() float64 {
	if x != nil {
		return x.PreMortgage
	}
	return 0
}

func (x *AccountInfo) GetPreCredit() float64 {
	if x != nil {
		return x.PreCredit
	}
	return 0
}

func (x *AccountInfo) GetPreDeposit() float64 {
	if x != nil {
		return x.PreDeposit
	}
	return 0
}

func (x *AccountInfo) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *AccountInfo) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *AccountInfo) GetInterestBase() float64 {
	if x != nil {
		return x.InterestBase
	}
	return 0
}

func (x *AccountInfo) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *AccountInfo) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *AccountInfo) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *AccountInfo) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *AccountInfo) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *AccountInfo) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *AccountInfo) GetCurrMargin() float64 {
	if x != nil {
		return x.CurrMargin
	}
	return 0
}

func (x *AccountInfo) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *AccountInfo) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *AccountInfo) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *AccountInfo) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *AccountInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountInfo) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *AccountInfo) GetWithdrawQuota() float64 {
	if x != nil {
		return x.WithdrawQuota
	}
	return 0
}

func (x *AccountInfo) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *AccountInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *AccountInfo) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *AccountInfo) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *AccountInfo) GetMortgage() float64 {
	if x != nil {
		return x.Mortgage
	}
	return 0
}

func (x *AccountInfo) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *AccountInfo) GetDeliveryMargin() float64 {
	if x != nil {
		return x.DeliveryMargin
	}
	return 0
}

func (x *AccountInfo) GetExchangeDeliveryMargin() float64 {
	if x != nil {
		return x.ExchangeDeliveryMargin
	}
	return 0
}

func (x *AccountInfo) GetReserveBalance() float64 {
	if x != nil {
		return x.ReserveBalance
	}
	return 0
}

func (x *AccountInfo) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *AccountInfo) GetPreFundMortgageIn() float64 {
	if x != nil {
		return x.PreFundMortgageIn
	}
	return 0
}

func (x *AccountInfo) GetPreFundMortgageOut() float64 {
	if x != nil {
		return x.PreFundMortgageOut
	}
	return 0
}

func (x *AccountInfo) GetFundMortgageIn() float64 {
	if x != nil {
		return x.FundMortgageIn
	}
	return 0
}

func (x *AccountInfo) GetFundMortgageOut() float64 {
	if x != nil {
		return x.FundMortgageOut
	}
	return 0
}

func (x *AccountInfo) GetFundMortgageAvailable() float64 {
	if x != nil {
		return x.FundMortgageAvailable
	}
	return 0
}

func (x *AccountInfo) GetMortgageableFund() float64 {
	if x != nil {
		return x.MortgageableFund
	}
	return 0
}

func (x *AccountInfo) GetSpecProductMargin() float64 {
	if x != nil {
		return x.SpecProductMargin
	}
	return 0
}

func (x *AccountInfo) GetSpecProductFrozenMargin() float64 {
	if x != nil {
		return x.SpecProductFrozenMargin
	}
	return 0
}

func (x *AccountInfo) GetSpecProductCommission() float64 {
	if x != nil {
		return x.SpecProductCommission
	}
	return 0
}

func (x *AccountInfo) GetSpecProductFrozenCommission() float64 {
	if x != nil {
		return x.SpecProductFrozenCommission
	}
	return 0
}

func (x *AccountInfo) GetSpecProductPositionProfit() float64 {
	if x != nil {
		return x.SpecProductPositionProfit
	}
	return 0
}

func (x *AccountInfo) GetSpecProductCloseProfit() float64 {
	if x != nil {
		return x.SpecProductCloseProfit
	}
	return 0
}

func (x *AccountInfo) GetSpecProductPositionProfitByAlg() float64 {
	if x != nil {
		return x.SpecProductPositionProfitByAlg
	}
	return 0
}

func (x *AccountInfo) GetSpecProductExchangeMargin() float64 {
	if x != nil {
		return x.SpecProductExchangeMargin
	}
	return 0
}

func (x *AccountInfo) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *AccountInfo) GetFrozenSwap() float64 {
	if x != nil {
		return x.FrozenSwap
	}
	return 0
}

func (x *AccountInfo) GetRemainSwap() float64 {
	if x != nil {
		return x.RemainSwap
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID           string      `protobuf:"bytes,1,opt,name=broker_iD,json=brokerID,proto3" json:"broker_iD,omitempty"`                                      // 经纪公司代码
	InstrumentID       string      `protobuf:"bytes,2,opt,name=instrument_iD,json=instrumentID,proto3" json:"instrument_iD,omitempty"`                          // 合约代码
	InstrumentName     string      `protobuf:"bytes,3,opt,name=instrument_name,json=instrumentName,proto3" json:"instrument_name,omitempty"`                    // 合约名
	ExchangeID         string      `protobuf:"bytes,4,opt,name=exchange_iD,json=exchangeID,proto3" json:"exchange_iD,omitempty"`                                // 交易所代码
	InvestorID         string      `protobuf:"bytes,5,opt,name=investor_iD,json=investorID,proto3" json:"investor_iD,omitempty"`                                // 投资者代码
	PosiDirection      int32       `protobuf:"varint,6,opt,name=posi_direction,json=posiDirection,proto3" json:"posi_direction,omitempty"`                      // 持仓多空方向（byte→int32）
	HedgeFlag          int32       `protobuf:"varint,7,opt,name=hedge_flag,json=hedgeFlag,proto3" json:"hedge_flag,omitempty"`                                  // 投机套保标志（byte→int32）
	PositionDate       PosDateType `protobuf:"varint,8,opt,name=position_date,json=positionDate,proto3,enum=pb.PosDateType" json:"position_date,omitempty"`     // 持仓日期（使用枚举）
	Position           int32       `protobuf:"varint,9,opt,name=position,proto3" json:"position,omitempty"`                                                     // 当前总持仓
	YdPosition         int32       `protobuf:"varint,10,opt,name=yd_position,json=ydPosition,proto3" json:"yd_position,omitempty"`                              // 上日持仓
	TodayPosition      int32       `protobuf:"varint,11,opt,name=today_position,json=todayPosition,proto3" json:"today_position,omitempty"`                     // 表示今新开仓
	OpenVolume         int32       `protobuf:"varint,12,opt,name=open_volume,json=openVolume,proto3" json:"open_volume,omitempty"`                              // 开仓量
	CloseVolume        int32       `protobuf:"varint,13,opt,name=close_volume,json=closeVolume,proto3" json:"close_volume,omitempty"`                           // 平仓量
	OpenAmount         float64     `protobuf:"fixed64,14,opt,name=open_amount,json=openAmount,proto3" json:"open_amount,omitempty"`                             // 开仓金额
	CloseAmount        float64     `protobuf:"fixed64,15,opt,name=close_amount,json=closeAmount,proto3" json:"close_amount,omitempty"`                          // 平仓金额
	PositionCost       float64     `protobuf:"fixed64,16,opt,name=position_cost,json=positionCost,proto3" json:"position_cost,omitempty"`                       // 持仓成本
	CloseProfit        float64     `protobuf:"fixed64,17,opt,name=close_profit,json=closeProfit,proto3" json:"close_profit,omitempty"`                          // 平仓盈亏
	PositionProfit     float64     `protobuf:"fixed64,18,opt,name=position_profit,json=positionProfit,proto3" json:"position_profit,omitempty"`                 // 持仓盈亏
	OpenCost           float64     `protobuf:"fixed64,19,opt,name=open_cost,json=openCost,proto3" json:"open_cost,omitempty"`                                   // 开仓成本
	LongFrozen         int32       `protobuf:"varint,20,opt,name=long_frozen,json=longFrozen,proto3" json:"long_frozen,omitempty"`                              // 多头冻结
	ShortFrozen        int32       `protobuf:"varint,21,opt,name=short_frozen,json=shortFrozen,proto3" json:"short_frozen,omitempty"`                           // 空头冻结
	LongFrozenAmount   float64     `protobuf:"fixed64,22,opt,name=long_frozen_amount,json=longFrozenAmount,proto3" json:"long_frozen_amount,omitempty"`         // 开仓冻结金额
	ShortFrozenAmount  float64     `protobuf:"fixed64,23,opt,name=short_frozen_amount,json=shortFrozenAmount,proto3" json:"short_frozen_amount,omitempty"`      // 开仓冻结金额
	PreMargin          float64     `protobuf:"fixed64,24,opt,name=pre_margin,json=preMargin,proto3" json:"pre_margin,omitempty"`                                // 上次占用的保证金
	UseMargin          float64     `protobuf:"fixed64,25,opt,name=use_margin,json=useMargin,proto3" json:"use_margin,omitempty"`                                // 占用的保证金
	FrozenMargin       float64     `protobuf:"fixed64,26,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`                       // 冻结的保证金
	FrozenCash         float64     `protobuf:"fixed64,27,opt,name=frozen_cash,json=frozenCash,proto3" json:"frozen_cash,omitempty"`                             // 冻结的资金
	FrozenCommission   float64     `protobuf:"fixed64,28,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`           // 冻结的手续费
	CashIn             float64     `protobuf:"fixed64,29,opt,name=cash_in,json=cashIn,proto3" json:"cash_in,omitempty"`                                         // 资金差额
	Commission         float64     `protobuf:"fixed64,30,opt,name=commission,proto3" json:"commission,omitempty"`                                               // 手续费
	PreSettlementPrice float64     `protobuf:"fixed64,31,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"`   // 上次结算价
	SettlementPrice    float64     `protobuf:"fixed64,32,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`              // 本次结算价
	SettlementID       int32       `protobuf:"varint,33,opt,name=settlement_iD,json=settlementID,proto3" json:"settlement_iD,omitempty"`                        // 结算编号
	ExchangeMargin     float64     `protobuf:"fixed64,34,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchange_margin,omitempty"`                 // 交易所保证金
	CombPosition       int32       `protobuf:"varint,35,opt,name=comb_position,json=combPosition,proto3" json:"comb_position,omitempty"`                        // 组合成交形成的持仓
	CombLongFrozen     int32       `protobuf:"varint,36,opt,name=comb_long_frozen,json=combLongFrozen,proto3" json:"comb_long_frozen,omitempty"`                // 组合多头冻结
	CombShortFrozen    int32       `protobuf:"varint,37,opt,name=comb_short_frozen,json=combShortFrozen,proto3" json:"comb_short_frozen,omitempty"`             // 组合空头冻结
	CloseProfitByDate  float64     `protobuf:"fixed64,38,opt,name=close_profit_by_date,json=closeProfitByDate,proto3" json:"close_profit_by_date,omitempty"`    // 逐日盯市平仓盈亏
	CloseProfitByTrade float64     `protobuf:"fixed64,39,opt,name=close_profit_by_trade,json=closeProfitByTrade,proto3" json:"close_profit_by_trade,omitempty"` // 逐笔对冲平仓盈亏
	StrikeFrozen       int32       `protobuf:"varint,40,opt,name=strike_frozen,json=strikeFrozen,proto3" json:"strike_frozen,omitempty"`                        // 执行冻结
	StrikeFrozenAmount float64     `protobuf:"fixed64,41,opt,name=strike_frozen_amount,json=strikeFrozenAmount,proto3" json:"strike_frozen_amount,omitempty"`   // 执行冻结金额
	AbandonFrozen      int32       `protobuf:"varint,42,opt,name=abandon_frozen,json=abandonFrozen,proto3" json:"abandon_frozen,omitempty"`                     // 放弃执行冻结
	YdStrikeFrozen     int32       `protobuf:"varint,43,opt,name=yd_strike_frozen,json=ydStrikeFrozen,proto3" json:"yd_strike_frozen,omitempty"`                // 执行冻结的昨仓
	PositionCostOffset float64     `protobuf:"fixed64,44,opt,name=position_cost_offset,json=positionCostOffset,proto3" json:"position_cost_offset,omitempty"`   // 大商所持仓成本差值
	Reserve1           string      `protobuf:"bytes,45,opt,name=reserve1,proto3" json:"reserve1,omitempty"`                                                     // 保留的无效字段
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thost_trader_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_thost_trader_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_thost_trader_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *Position) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *Position) GetInstrumentName() string {
	if x != nil {
		return x.InstrumentName
	}
	return ""
}

func (x *Position) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *Position) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *Position) GetPosiDirection() int32 {
	if x != nil {
		return x.PosiDirection
	}
	return 0
}

func (x *Position) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *Position) GetPositionDate() PosDateType {
	if x != nil {
		return x.PositionDate
	}
	return PosDateType_TODAY
}

func (x *Position) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Position) GetYdPosition() int32 {
	if x != nil {
		return x.YdPosition
	}
	return 0
}

func (x *Position) GetTodayPosition() int32 {
	if x != nil {
		return x.TodayPosition
	}
	return 0
}

func (x *Position) GetOpenVolume() int32 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *Position) GetCloseVolume() int32 {
	if x != nil {
		return x.CloseVolume
	}
	return 0
}

func (x *Position) GetOpenAmount() float64 {
	if x != nil {
		return x.OpenAmount
	}
	return 0
}

func (x *Position) GetCloseAmount() float64 {
	if x != nil {
		return x.CloseAmount
	}
	return 0
}

func (x *Position) GetPositionCost() float64 {
	if x != nil {
		return x.PositionCost
	}
	return 0
}

func (x *Position) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *Position) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *Position) GetOpenCost() float64 {
	if x != nil {
		return x.OpenCost
	}
	return 0
}

func (x *Position) GetLongFrozen() int32 {
	if x != nil {
		return x.LongFrozen
	}
	return 0
}

func (x *Position) GetShortFrozen() int32 {
	if x != nil {
		return x.ShortFrozen
	}
	return 0
}

func (x *Position) GetLongFrozenAmount() float64 {
	if x != nil {
		return x.LongFrozenAmount
	}
	return 0
}

func (x *Position) GetShortFrozenAmount() float64 {
	if x != nil {
		return x.ShortFrozenAmount
	}
	return 0
}

func (x *Position) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *Position) GetUseMargin() float64 {
	if x != nil {
		return x.UseMargin
	}
	return 0
}

func (x *Position) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *Position) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *Position) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *Position) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *Position) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Position) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *Position) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *Position) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *Position) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *Position) GetCombPosition() int32 {
	if x != nil {
		return x.CombPosition
	}
	return 0
}

func (x *Position) GetCombLongFrozen() int32 {
	if x != nil {
		return x.CombLongFrozen
	}
	return 0
}

func (x *Position) GetCombShortFrozen() int32 {
	if x != nil {
		return x.CombShortFrozen
	}
	return 0
}

func (x *Position) GetCloseProfitByDate() float64 {
	if x != nil {
		return x.CloseProfitByDate
	}
	return 0
}

func (x *Position) GetCloseProfitByTrade() float64 {
	if x != nil {
		return x.CloseProfitByTrade
	}
	return 0
}

func (x *Position) GetStrikeFrozen() int32 {
	if x != nil {
		return x.StrikeFrozen
	}
	return 0
}

func (x *Position) GetStrikeFrozenAmount() float64 {
	if x != nil {
		return x.StrikeFrozenAmount
	}
	return 0
}

func (x *Position) GetAbandonFrozen() int32 {
	if x != nil {
		return x.AbandonFrozen
	}
	return 0
}

func (x *Position) GetYdStrikeFrozen() int32 {
	if x != nil {
		return x.YdStrikeFrozen
	}
	return 0
}

func (x *Position) GetPositionCostOffset() float64 {
	if x != nil {
		return x.PositionCostOffset
	}
	return 0
}

func (x *Position) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

// 订单信息 && 报单响应
type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID             string  `protobuf:"bytes,1,opt,name=broker_iD,json=brokerID,proto3" json:"broker_iD,omitempty"`                                           // 经纪公司代码
	InvestorID           string  `protobuf:"bytes,2,opt,name=investor_iD,json=investorID,proto3" json:"investor_iD,omitempty"`                                     // 投资者代码
	OrderRef             string  `protobuf:"bytes,3,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`                                           // 报单引用
	UserID               string  `protobuf:"bytes,4,opt,name=user_iD,json=userID,proto3" json:"user_iD,omitempty"`                                                 // 用户代码
	OrderPriceType       int32   `protobuf:"varint,5,opt,name=order_price_type,json=orderPriceType,proto3" json:"order_price_type,omitempty"`                      // 报单价格条件 (byte→int32)
	Direction            int32   `protobuf:"varint,6,opt,name=direction,proto3" json:"direction,omitempty"`                                                        // 买卖方向 (byte→int32)
	CombOffsetFlag       string  `protobuf:"bytes,7,opt,name=comb_offset_flag,json=combOffsetFlag,proto3" json:"comb_offset_flag,omitempty"`                       // 组合开平标志
	CombHedgeFlag        string  `protobuf:"bytes,8,opt,name=comb_hedge_flag,json=combHedgeFlag,proto3" json:"comb_hedge_flag,omitempty"`                          // 组合投机套保标志
	LimitPrice           float64 `protobuf:"fixed64,9,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`                                   // 价格
	VolumeTotalOriginal  int32   `protobuf:"varint,10,opt,name=volume_total_original,json=volumeTotalOriginal,proto3" json:"volume_total_original,omitempty"`      // 数量
	TimeCondition        string  `protobuf:"bytes,11,opt,name=time_condition,json=timeCondition,proto3" json:"time_condition,omitempty"`                           // 有效期类型
	GtdDate              string  `protobuf:"bytes,12,opt,name=gtd_date,json=gtdDate,proto3" json:"gtd_date,omitempty"`                                             // GTD日期
	VolumeCondition      string  `protobuf:"bytes,13,opt,name=volume_condition,json=volumeCondition,proto3" json:"volume_condition,omitempty"`                     // 成交量类型
	MinVolume            int32   `protobuf:"varint,14,opt,name=min_volume,json=minVolume,proto3" json:"min_volume,omitempty"`                                      // 最小成交量
	ContingentCondition  string  `protobuf:"bytes,15,opt,name=contingent_condition,json=contingentCondition,proto3" json:"contingent_condition,omitempty"`         // 触发条件
	StopPrice            float64 `protobuf:"fixed64,16,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`                                     // 止损价
	ForceCloseReason     int32   `protobuf:"varint,17,opt,name=force_close_reason,json=forceCloseReason,proto3" json:"force_close_reason,omitempty"`               // 强平原因 (byte→int32)
	IsAutoSuspend        int32   `protobuf:"varint,18,opt,name=is_auto_suspend,json=isAutoSuspend,proto3" json:"is_auto_suspend,omitempty"`                        // 自动挂起标志
	BusinessUnit         string  `protobuf:"bytes,19,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`                              // 业务单元
	RequestID            int32   `protobuf:"varint,20,opt,name=request_iD,json=requestID,proto3" json:"request_iD,omitempty"`                                      // 请求编号
	OrderLocalID         string  `protobuf:"bytes,21,opt,name=order_local_iD,json=orderLocalID,proto3" json:"order_local_iD,omitempty"`                            // 本地报单编号
	ExchangeID           string  `protobuf:"bytes,22,opt,name=exchange_iD,json=exchangeID,proto3" json:"exchange_iD,omitempty"`                                    // 交易所代码
	ParticipantID        string  `protobuf:"bytes,23,opt,name=participant_iD,json=participantID,proto3" json:"participant_iD,omitempty"`                           // 会员代码
	ClientID             string  `protobuf:"bytes,24,opt,name=client_iD,json=clientID,proto3" json:"client_iD,omitempty"`                                          // 客户代码
	AccountID            string  `protobuf:"bytes,25,opt,name=account_iD,json=accountID,proto3" json:"account_iD,omitempty"`                                       // 资金账号
	InstrumentID         string  `protobuf:"bytes,26,opt,name=instrument_iD,json=instrumentID,proto3" json:"instrument_iD,omitempty"`                              // 合约代码
	ExchangeInstID       string  `protobuf:"bytes,27,opt,name=exchange_inst_iD,json=exchangeInstID,proto3" json:"exchange_inst_iD,omitempty"`                      // 合约在交易所的代码
	TraderID             string  `protobuf:"bytes,28,opt,name=trader_iD,json=traderID,proto3" json:"trader_iD,omitempty"`                                          // 交易所交易员代码
	InstallID            int32   `protobuf:"varint,29,opt,name=install_iD,json=installID,proto3" json:"install_iD,omitempty"`                                      // 安装编号
	OrderSubmitStatus    string  `protobuf:"bytes,30,opt,name=order_submit_status,json=orderSubmitStatus,proto3" json:"order_submit_status,omitempty"`             // 报单提交状态
	NotifySequence       int32   `protobuf:"varint,31,opt,name=notify_sequence,json=notifySequence,proto3" json:"notify_sequence,omitempty"`                       // 报单提示序号
	TradingDay           string  `protobuf:"bytes,32,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                    // 交易日
	SettlementID         int32   `protobuf:"varint,33,opt,name=settlement_iD,json=settlementID,proto3" json:"settlement_iD,omitempty"`                             // 结算编号
	OrderSysID           string  `protobuf:"bytes,34,opt,name=order_sys_iD,json=orderSysID,proto3" json:"order_sys_iD,omitempty"`                                  // 报单编号
	OrderSource          string  `protobuf:"bytes,35,opt,name=order_source,json=orderSource,proto3" json:"order_source,omitempty"`                                 // 报单来源
	OrderStatus          int32   `protobuf:"varint,36,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`                                // 报单状态 (byte→int32)
	OrderType            string  `protobuf:"bytes,37,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                                       // 报单类型
	VolumeTraded         int32   `protobuf:"varint,38,opt,name=volume_traded,json=volumeTraded,proto3" json:"volume_traded,omitempty"`                             // 今成交数量
	VolumeTotal          int32   `protobuf:"varint,39,opt,name=volume_total,json=volumeTotal,proto3" json:"volume_total,omitempty"`                                // 剩余数量
	InsertDate           string  `protobuf:"bytes,40,opt,name=insert_date,json=insertDate,proto3" json:"insert_date,omitempty"`                                    // 报单日期
	InsertTime           string  `protobuf:"bytes,41,opt,name=insert_time,json=insertTime,proto3" json:"insert_time,omitempty"`                                    // 委托时间
	ActiveTime           string  `protobuf:"bytes,42,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`                                    // 激活时间
	SuspendTime          string  `protobuf:"bytes,43,opt,name=suspend_time,json=suspendTime,proto3" json:"suspend_time,omitempty"`                                 // 挂起时间
	UpdateTime           string  `protobuf:"bytes,44,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                    // 最后修改时间
	CancelTime           string  `protobuf:"bytes,45,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`                                    // 撤销时间
	ActiveTraderID       string  `protobuf:"bytes,46,opt,name=active_trader_iD,json=activeTraderID,proto3" json:"active_trader_iD,omitempty"`                      // 最后修改交易所交易员代码
	ClearingPartID       string  `protobuf:"bytes,47,opt,name=clearing_part_iD,json=clearingPartID,proto3" json:"clearing_part_iD,omitempty"`                      // 结算会员编号
	SequenceNo           int32   `protobuf:"varint,48,opt,name=sequence_no,json=sequenceNo,proto3" json:"sequence_no,omitempty"`                                   // 序号
	FrontID              int32   `protobuf:"varint,49,opt,name=front_iD,json=frontID,proto3" json:"front_iD,omitempty"`                                            // 前置编号
	SessionID            int32   `protobuf:"varint,50,opt,name=session_iD,json=sessionID,proto3" json:"session_iD,omitempty"`                                      // 会话编号
	UserProductInfo      string  `protobuf:"bytes,51,opt,name=user_product_info,json=userProductInfo,proto3" json:"user_product_info,omitempty"`                   // 用户端产品信息
	StatusMsg            string  `protobuf:"bytes,52,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`                                       // 状态信息
	UserForceClose       int32   `protobuf:"varint,53,opt,name=user_force_close,json=userForceClose,proto3" json:"user_force_close,omitempty"`                     // 用户强评标志
	ActiveUserID         string  `protobuf:"bytes,54,opt,name=active_user_iD,json=activeUserID,proto3" json:"active_user_iD,omitempty"`                            // 操作用户代码
	BrokerOrderSeq       int32   `protobuf:"varint,55,opt,name=broker_order_seq,json=brokerOrderSeq,proto3" json:"broker_order_seq,omitempty"`                     // 经纪公司报单编号
	RelativeOrderSysID   string  `protobuf:"bytes,56,opt,name=relative_order_sys_iD,json=relativeOrderSysID,proto3" json:"relative_order_sys_iD,omitempty"`        // 相关报单
	ZceTotalTradedVolume int32   `protobuf:"varint,57,opt,name=zce_total_traded_volume,json=zceTotalTradedVolume,proto3" json:"zce_total_traded_volume,omitempty"` // 郑商所成交数量
	IsSwapOrder          int32   `protobuf:"varint,58,opt,name=is_swap_order,json=isSwapOrder,proto3" json:"is_swap_order,omitempty"`                              // 互换单标志
	BranchID             string  `protobuf:"bytes,59,opt,name=branch_iD,json=branchID,proto3" json:"branch_iD,omitempty"`                                          // 营业部编号
	InvestUnitID         string  `protobuf:"bytes,60,opt,name=invest_unit_iD,json=investUnitID,proto3" json:"invest_unit_iD,omitempty"`                            // 投资单元代码
	CurrencyID           string  `protobuf:"bytes,61,opt,name=currency_iD,json=currencyID,proto3" json:"currency_iD,omitempty"`                                    // 币种代码
	MacAddress           string  `protobuf:"bytes,62,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`                                    // Mac地址
	IpAddress            string  `protobuf:"bytes,63,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                                       // IP地址
	Reserve_1            string  `protobuf:"bytes,64,opt,name=reserve_1,json=reserve1,proto3" json:"reserve_1,omitempty"`                                          // 保留的无效字段1
	Reserve_2            string  `protobuf:"bytes,65,opt,name=reserve_2,json=reserve2,proto3" json:"reserve_2,omitempty"`                                          // 保留的无效字段2
	Reserve_3            string  `protobuf:"bytes,66,opt,name=reserve_3,json=reserve3,proto3" json:"reserve_3,omitempty"`                                          // 保留的无效字段3
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thost_trader_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thost_trader_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_thost_trader_proto_rawDescGZIP(), []int{2}
}

func (x *OrderInfo) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *OrderInfo) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *OrderInfo) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *OrderInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OrderInfo) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *OrderInfo) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *OrderInfo) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *OrderInfo) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *OrderInfo) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *OrderInfo) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *OrderInfo) GetTimeCondition() string {
	if x != nil {
		return x.TimeCondition
	}
	return ""
}

func (x *OrderInfo) GetGtdDate() string {
	if x != nil {
		return x.GtdDate
	}
	return ""
}

func (x *OrderInfo) GetVolumeCondition() string {
	if x != nil {
		return x.VolumeCondition
	}
	return ""
}

func (x *OrderInfo) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *OrderInfo) GetContingentCondition() string {
	if x != nil {
		return x.ContingentCondition
	}
	return ""
}

func (x *OrderInfo) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *OrderInfo) GetForceCloseReason() int32 {
	if x != nil {
		return x.ForceCloseReason
	}
	return 0
}

func (x *OrderInfo) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *OrderInfo) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *OrderInfo) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *OrderInfo) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *OrderInfo) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderInfo) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *OrderInfo) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *OrderInfo) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *OrderInfo) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *OrderInfo) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *OrderInfo) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *OrderInfo) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *OrderInfo) GetOrderSubmitStatus() string {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return ""
}

func (x *OrderInfo) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *OrderInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *OrderInfo) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *OrderInfo) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *OrderInfo) GetOrderSource() string {
	if x != nil {
		return x.OrderSource
	}
	return ""
}

func (x *OrderInfo) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *OrderInfo) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderInfo) GetVolumeTraded() int32 {
	if x != nil {
		return x.VolumeTraded
	}
	return 0
}

func (x *OrderInfo) GetVolumeTotal() int32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *OrderInfo) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *OrderInfo) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *OrderInfo) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *OrderInfo) GetSuspendTime() string {
	if x != nil {
		return x.SuspendTime
	}
	return ""
}

func (x *OrderInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *OrderInfo) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *OrderInfo) GetActiveTraderID() string {
	if x != nil {
		return x.ActiveTraderID
	}
	return ""
}

func (x *OrderInfo) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *OrderInfo) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *OrderInfo) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *OrderInfo) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *OrderInfo) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *OrderInfo) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *OrderInfo) GetUserForceClose() int32 {
	if x != nil {
		return x.UserForceClose
	}
	return 0
}

func (x *OrderInfo) GetActiveUserID() string {
	if x != nil {
		return x.ActiveUserID
	}
	return ""
}

func (x *OrderInfo) GetBrokerOrderSeq() int32 {
	if x != nil {
		return x.BrokerOrderSeq
	}
	return 0
}

func (x *OrderInfo) GetRelativeOrderSysID() string {
	if x != nil {
		return x.RelativeOrderSysID
	}
	return ""
}

func (x *OrderInfo) GetZceTotalTradedVolume() int32 {
	if x != nil {
		return x.ZceTotalTradedVolume
	}
	return 0
}

func (x *OrderInfo) GetIsSwapOrder() int32 {
	if x != nil {
		return x.IsSwapOrder
	}
	return 0
}

func (x *OrderInfo) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *OrderInfo) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *OrderInfo) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *OrderInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *OrderInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *OrderInfo) GetReserve_1() string {
	if x != nil {
		return x.Reserve_1
	}
	return ""
}

func (x *OrderInfo) GetReserve_2() string {
	if x != nil {
		return x.Reserve_2
	}
	return ""
}

func (x *OrderInfo) GetReserve_3() string {
	if x != nil {
		return x.Reserve_3
	}
	return ""
}

// 报单操作(如：撤单)
type OrderActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string  `protobuf:"bytes,1,opt,name=broker_iD,json=brokerID,proto3" json:"broker_iD,omitempty"`                               // 经纪公司代码
	InvestorID        string  `protobuf:"bytes,2,opt,name=investor_iD,json=investorID,proto3" json:"investor_iD,omitempty"`                         // 投资者代码
	OrderActionRef    int32   `protobuf:"varint,3,opt,name=order_action_ref,json=orderActionRef,proto3" json:"order_action_ref,omitempty"`          // 报单操作引用
	OrderRef          string  `protobuf:"bytes,4,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`                               // 报单引用
	RequestID         int32   `protobuf:"varint,5,opt,name=request_iD,json=requestID,proto3" json:"request_iD,omitempty"`                           // 请求编号
	FrontID           int32   `protobuf:"varint,6,opt,name=front_iD,json=frontID,proto3" json:"front_iD,omitempty"`                                 // 前置编号
	SessionID         int32   `protobuf:"varint,7,opt,name=session_iD,json=sessionID,proto3" json:"session_iD,omitempty"`                           // 会话编号
	ExchangeID        string  `protobuf:"bytes,8,opt,name=exchange_iD,json=exchangeID,proto3" json:"exchange_iD,omitempty"`                         // 交易所代码
	OrderSysID        string  `protobuf:"bytes,9,opt,name=order_sys_iD,json=orderSysID,proto3" json:"order_sys_iD,omitempty"`                       // 报单编号
	ActionFlag        int32   `protobuf:"varint,10,opt,name=action_flag,json=actionFlag,proto3" json:"action_flag,omitempty"`                       // 操作标志 (byte→int32)
	LimitPrice        float64 `protobuf:"fixed64,11,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`                      // 价格
	VolumeChange      int32   `protobuf:"varint,12,opt,name=volume_change,json=volumeChange,proto3" json:"volume_change,omitempty"`                 // 数量变化
	ActionDate        string  `protobuf:"bytes,13,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`                        // 操作日期
	ActionTime        string  `protobuf:"bytes,14,opt,name=action_time,json=actionTime,proto3" json:"action_time,omitempty"`                        // 操作时间
	TraderID          string  `protobuf:"bytes,15,opt,name=trader_iD,json=traderID,proto3" json:"trader_iD,omitempty"`                              // 交易所交易员代码
	InstallID         int32   `protobuf:"varint,16,opt,name=install_iD,json=installID,proto3" json:"install_iD,omitempty"`                          // 安装编号
	OrderLocalID      string  `protobuf:"bytes,17,opt,name=order_local_iD,json=orderLocalID,proto3" json:"order_local_iD,omitempty"`                // 本地报单编号
	ActionLocalID     string  `protobuf:"bytes,18,opt,name=action_local_iD,json=actionLocalID,proto3" json:"action_local_iD,omitempty"`             // 操作本地编号
	ParticipantID     string  `protobuf:"bytes,19,opt,name=participant_iD,json=participantID,proto3" json:"participant_iD,omitempty"`               // 会员代码
	ClientID          string  `protobuf:"bytes,20,opt,name=client_iD,json=clientID,proto3" json:"client_iD,omitempty"`                              // 客户代码
	BusinessUnit      string  `protobuf:"bytes,21,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`                  // 业务单元
	OrderActionStatus string  `protobuf:"bytes,22,opt,name=order_action_status,json=orderActionStatus,proto3" json:"order_action_status,omitempty"` // 报单操作状态
	UserID            string  `protobuf:"bytes,23,opt,name=user_iD,json=userID,proto3" json:"user_iD,omitempty"`                                    // 用户代码
	StatusMsg         string  `protobuf:"bytes,24,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`                           // 状态信息
	Reserve_1         string  `protobuf:"bytes,25,opt,name=reserve_1,json=reserve1,proto3" json:"reserve_1,omitempty"`                              // 保留的无效字段1
	BranchID          string  `protobuf:"bytes,26,opt,name=branch_iD,json=branchID,proto3" json:"branch_iD,omitempty"`                              // 营业部编号
	InvestUnitID      string  `protobuf:"bytes,27,opt,name=invest_unit_iD,json=investUnitID,proto3" json:"invest_unit_iD,omitempty"`                // 投资单元代码
	Reserve_2         string  `protobuf:"bytes,28,opt,name=reserve_2,json=reserve2,proto3" json:"reserve_2,omitempty"`                              // 保留的无效字段2
	MacAddress        string  `protobuf:"bytes,29,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`                        // Mac地址
	InstrumentID      string  `protobuf:"bytes,30,opt,name=instrument_iD,json=instrumentID,proto3" json:"instrument_iD,omitempty"`                  // 合约代码
	IpAddress         string  `protobuf:"bytes,31,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`                           // IP地址
}

func (x *OrderActionInfo) Reset() {
	*x = OrderActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thost_trader_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderActionInfo) ProtoMessage() {}

func (x *OrderActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thost_trader_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderActionInfo.ProtoReflect.Descriptor instead.
func (*OrderActionInfo) Descriptor() ([]byte, []int) {
	return file_thost_trader_proto_rawDescGZIP(), []int{3}
}

func (x *OrderActionInfo) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *OrderActionInfo) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *OrderActionInfo) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *OrderActionInfo) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *OrderActionInfo) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *OrderActionInfo) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *OrderActionInfo) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *OrderActionInfo) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderActionInfo) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *OrderActionInfo) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *OrderActionInfo) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *OrderActionInfo) GetVolumeChange() int32 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *OrderActionInfo) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *OrderActionInfo) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *OrderActionInfo) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *OrderActionInfo) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *OrderActionInfo) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *OrderActionInfo) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *OrderActionInfo) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *OrderActionInfo) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *OrderActionInfo) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *OrderActionInfo) GetOrderActionStatus() string {
	if x != nil {
		return x.OrderActionStatus
	}
	return ""
}

func (x *OrderActionInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OrderActionInfo) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *OrderActionInfo) GetReserve_1() string {
	if x != nil {
		return x.Reserve_1
	}
	return ""
}

func (x *OrderActionInfo) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *OrderActionInfo) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *OrderActionInfo) GetReserve_2() string {
	if x != nil {
		return x.Reserve_2
	}
	return ""
}

func (x *OrderActionInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *OrderActionInfo) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *OrderActionInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

// 成交信息
type TradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string  `protobuf:"bytes,1,opt,name=broker_iD,json=brokerID,proto3" json:"broker_iD,omitempty"`                       // 经纪公司代码
	InvestorID     string  `protobuf:"bytes,2,opt,name=investor_iD,json=investorID,proto3" json:"investor_iD,omitempty"`                 // 投资者代码
	Reserve_1      string  `protobuf:"bytes,3,opt,name=reserve_1,json=reserve1,proto3" json:"reserve_1,omitempty"`                       // 保留的无效字段
	OrderRef       string  `protobuf:"bytes,4,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`                       // 报单引用
	UserID         string  `protobuf:"bytes,5,opt,name=user_iD,json=userID,proto3" json:"user_iD,omitempty"`                             // 用户代码
	ExchangeID     string  `protobuf:"bytes,6,opt,name=exchange_iD,json=exchangeID,proto3" json:"exchange_iD,omitempty"`                 // 交易所代码
	TradeID        string  `protobuf:"bytes,7,opt,name=trade_iD,json=tradeID,proto3" json:"trade_iD,omitempty"`                          // 成交编号
	Direction      int32   `protobuf:"varint,8,opt,name=direction,proto3" json:"direction,omitempty"`                                    // 买卖方向 (byte→int32)
	OrderSysID     string  `protobuf:"bytes,9,opt,name=order_sys_iD,json=orderSysID,proto3" json:"order_sys_iD,omitempty"`               // 报单编号
	ParticipantID  string  `protobuf:"bytes,10,opt,name=participant_iD,json=participantID,proto3" json:"participant_iD,omitempty"`       // 会员代码
	ClientID       string  `protobuf:"bytes,11,opt,name=client_iD,json=clientID,proto3" json:"client_iD,omitempty"`                      // 客户代码
	TradingRole    string  `protobuf:"bytes,12,opt,name=trading_role,json=tradingRole,proto3" json:"trading_role,omitempty"`             // 交易角色
	Reserve_2      string  `protobuf:"bytes,13,opt,name=reserve_2,json=reserve2,proto3" json:"reserve_2,omitempty"`                      // 保留的无效字段
	OffsetFlag     int32   `protobuf:"varint,14,opt,name=offset_flag,json=offsetFlag,proto3" json:"offset_flag,omitempty"`               // 开平标志 (byte→int32)
	HedgeFlag      string  `protobuf:"bytes,15,opt,name=hedge_flag,json=hedgeFlag,proto3" json:"hedge_flag,omitempty"`                   // 投机套保标志
	Price          float64 `protobuf:"fixed64,16,opt,name=price,proto3" json:"price,omitempty"`                                          // 价格
	Volume         int32   `protobuf:"varint,17,opt,name=volume,proto3" json:"volume,omitempty"`                                         // 数量
	TradeDate      string  `protobuf:"bytes,18,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`                   // 成交时期
	TradeTime      string  `protobuf:"bytes,19,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`                   // 成交时间
	TradeType      int32   `protobuf:"varint,20,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`                  // 成交类型 (byte→int32)
	PriceSource    string  `protobuf:"bytes,21,opt,name=price_source,json=priceSource,proto3" json:"price_source,omitempty"`             // 成交价来源
	TraderID       string  `protobuf:"bytes,22,opt,name=trader_iD,json=traderID,proto3" json:"trader_iD,omitempty"`                      // 交易所交易员代码
	OrderLocalID   string  `protobuf:"bytes,23,opt,name=order_local_iD,json=orderLocalID,proto3" json:"order_local_iD,omitempty"`        // 本地报单编号
	ClearingPartID string  `protobuf:"bytes,24,opt,name=clearing_part_iD,json=clearingPartID,proto3" json:"clearing_part_iD,omitempty"`  // 结算会员编号
	BusinessUnit   string  `protobuf:"bytes,25,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`          // 业务单元
	SequenceNo     int32   `protobuf:"varint,26,opt,name=sequence_no,json=sequenceNo,proto3" json:"sequence_no,omitempty"`               // 序号
	TradingDay     string  `protobuf:"bytes,27,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                // 交易日
	SettlementID   int32   `protobuf:"varint,28,opt,name=settlement_iD,json=settlementID,proto3" json:"settlement_iD,omitempty"`         // 结算编号
	BrokerOrderSeq int32   `protobuf:"varint,29,opt,name=broker_order_seq,json=brokerOrderSeq,proto3" json:"broker_order_seq,omitempty"` // 经纪公司报单编号
	TradeSource    int32   `protobuf:"varint,30,opt,name=trade_source,json=tradeSource,proto3" json:"trade_source,omitempty"`            // 成交来源 (byte→int32)
	InvestUnitID   string  `protobuf:"bytes,31,opt,name=invest_unit_iD,json=investUnitID,proto3" json:"invest_unit_iD,omitempty"`        // 投资单元代码
	InstrumentID   string  `protobuf:"bytes,32,opt,name=instrument_iD,json=instrumentID,proto3" json:"instrument_iD,omitempty"`          // 合约代码
	ExchangeInstID string  `protobuf:"bytes,33,opt,name=exchange_inst_iD,json=exchangeInstID,proto3" json:"exchange_inst_iD,omitempty"`  // 合约在交易所的代码
}

func (x *TradeInfo) Reset() {
	*x = TradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thost_trader_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInfo) ProtoMessage() {}

func (x *TradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thost_trader_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInfo.ProtoReflect.Descriptor instead.
func (*TradeInfo) Descriptor() ([]byte, []int) {
	return file_thost_trader_proto_rawDescGZIP(), []int{4}
}

func (x *TradeInfo) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *TradeInfo) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *TradeInfo) GetReserve_1() string {
	if x != nil {
		return x.Reserve_1
	}
	return ""
}

func (x *TradeInfo) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *TradeInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TradeInfo) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *TradeInfo) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *TradeInfo) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *TradeInfo) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *TradeInfo) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *TradeInfo) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *TradeInfo) GetTradingRole() string {
	if x != nil {
		return x.TradingRole
	}
	return ""
}

func (x *TradeInfo) GetReserve_2() string {
	if x != nil {
		return x.Reserve_2
	}
	return ""
}

func (x *TradeInfo) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *TradeInfo) GetHedgeFlag() string {
	if x != nil {
		return x.HedgeFlag
	}
	return ""
}

func (x *TradeInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeInfo) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeInfo) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *TradeInfo) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *TradeInfo) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *TradeInfo) GetPriceSource() string {
	if x != nil {
		return x.PriceSource
	}
	return ""
}

func (x *TradeInfo) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *TradeInfo) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *TradeInfo) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *TradeInfo) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *TradeInfo) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *TradeInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *TradeInfo) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *TradeInfo) GetBrokerOrderSeq() int32 {
	if x != nil {
		return x.BrokerOrderSeq
	}
	return 0
}

func (x *TradeInfo) GetTradeSource() int32 {
	if x != nil {
		return x.TradeSource
	}
	return 0
}

func (x *TradeInfo) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *TradeInfo) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *TradeInfo) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

// 银行期货转账信息（请求和响应共用）
type BankFutureTransferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode         string  `protobuf:"bytes,1,opt,name=trade_code,json=tradeCode,proto3" json:"trade_code,omitempty"`                              // 业务功能码
	BankID            string  `protobuf:"bytes,2,opt,name=bank_iD,json=bankID,proto3" json:"bank_iD,omitempty"`                                       // 银行代码
	BankBranchID      string  `protobuf:"bytes,3,opt,name=bank_branch_iD,json=bankBranchID,proto3" json:"bank_branch_iD,omitempty"`                   // 银行分支机构代码
	BrokerID          string  `protobuf:"bytes,4,opt,name=broker_iD,json=brokerID,proto3" json:"broker_iD,omitempty"`                                 // 期商代码
	BrokerBranchID    string  `protobuf:"bytes,5,opt,name=broker_branch_iD,json=brokerBranchID,proto3" json:"broker_branch_iD,omitempty"`             // 期商分支机构代码
	TradeDate         string  `protobuf:"bytes,6,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`                              // 交易日期
	TradeTime         string  `protobuf:"bytes,7,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`                              // 交易时间
	BankSerial        string  `protobuf:"bytes,8,opt,name=bank_serial,json=bankSerial,proto3" json:"bank_serial,omitempty"`                           // 银行流水号
	TradingDay        string  `protobuf:"bytes,9,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                           // 交易系统日期
	PlateSerial       int32   `protobuf:"varint,10,opt,name=plate_serial,json=plateSerial,proto3" json:"plate_serial,omitempty"`                      // 银期平台消息流水号
	LastFragment      string  `protobuf:"bytes,11,opt,name=last_fragment,json=lastFragment,proto3" json:"last_fragment,omitempty"`                    // 最后分片标志
	SessionID         int32   `protobuf:"varint,12,opt,name=session_iD,json=sessionID,proto3" json:"session_iD,omitempty"`                            // 会话号
	CustomerName      string  `protobuf:"bytes,13,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`                    // 客户姓名
	IdCardType        string  `protobuf:"bytes,14,opt,name=id_card_type,json=idCardType,proto3" json:"id_card_type,omitempty"`                        // 证件类型
	IdentifiedCardNo  string  `protobuf:"bytes,15,opt,name=identified_card_no,json=identifiedCardNo,proto3" json:"identified_card_no,omitempty"`      // 证件号码
	CustType          string  `protobuf:"bytes,16,opt,name=cust_type,json=custType,proto3" json:"cust_type,omitempty"`                                // 客户类型
	BankAccount       string  `protobuf:"bytes,17,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`                       // 银行帐号
	BankPassWord      string  `protobuf:"bytes,18,opt,name=bank_pass_word,json=bankPassWord,proto3" json:"bank_pass_word,omitempty"`                  // 银行密码
	AccountID         string  `protobuf:"bytes,19,opt,name=account_iD,json=accountID,proto3" json:"account_iD,omitempty"`                             // 投资者帐号
	Password          string  `protobuf:"bytes,20,opt,name=password,proto3" json:"password,omitempty"`                                                // 期货密码
	InstallID         int32   `protobuf:"varint,21,opt,name=install_iD,json=installID,proto3" json:"install_iD,omitempty"`                            // 安装编号
	FutureSerial      int32   `protobuf:"varint,22,opt,name=future_serial,json=futureSerial,proto3" json:"future_serial,omitempty"`                   // 期货公司流水号
	UserID            string  `protobuf:"bytes,23,opt,name=user_iD,json=userID,proto3" json:"user_iD,omitempty"`                                      // 用户标识
	VerifyCertNoFlag  string  `protobuf:"bytes,24,opt,name=verify_cert_no_flag,json=verifyCertNoFlag,proto3" json:"verify_cert_no_flag,omitempty"`    // 验证客户证件号码标志
	CurrencyID        string  `protobuf:"bytes,25,opt,name=currency_iD,json=currencyID,proto3" json:"currency_iD,omitempty"`                          // 币种代码
	TradeAmount       float64 `protobuf:"fixed64,26,opt,name=trade_amount,json=tradeAmount,proto3" json:"trade_amount,omitempty"`                     // 转帐金额
	FutureFetchAmount float64 `protobuf:"fixed64,27,opt,name=future_fetch_amount,json=futureFetchAmount,proto3" json:"future_fetch_amount,omitempty"` // 期货可取金额
	FeePayFlag        string  `protobuf:"bytes,28,opt,name=fee_pay_flag,json=feePayFlag,proto3" json:"fee_pay_flag,omitempty"`                        // 费用支付标志
	CustFee           float64 `protobuf:"fixed64,29,opt,name=cust_fee,json=custFee,proto3" json:"cust_fee,omitempty"`                                 // 应收客户费用
	BrokerFee         float64 `protobuf:"fixed64,30,opt,name=broker_fee,json=brokerFee,proto3" json:"broker_fee,omitempty"`                           // 应收期货公司费用
	Message           string  `protobuf:"bytes,31,opt,name=message,proto3" json:"message,omitempty"`                                                  // 消息
	Digest            string  `protobuf:"bytes,32,opt,name=digest,proto3" json:"digest,omitempty"`                                                    // 摘要
	BankAccType       string  `protobuf:"bytes,33,opt,name=bank_acc_type,json=bankAccType,proto3" json:"bank_acc_type,omitempty"`                     // 银行帐号类型
	DeviceID          string  `protobuf:"bytes,34,opt,name=device_iD,json=deviceID,proto3" json:"device_iD,omitempty"`                                // 渠道标志
	BankSecuAccType   string  `protobuf:"bytes,35,opt,name=bank_secu_acc_type,json=bankSecuAccType,proto3" json:"bank_secu_acc_type,omitempty"`       // 期货单位帐号类型
	BrokerIDByBank    string  `protobuf:"bytes,36,opt,name=broker_iD_by_bank,json=brokerIDByBank,proto3" json:"broker_iD_by_bank,omitempty"`          // 期货公司银行编码
	BankSecuAcc       string  `protobuf:"bytes,37,opt,name=bank_secu_acc,json=bankSecuAcc,proto3" json:"bank_secu_acc,omitempty"`                     // 期货单位帐号
	BankPwdFlag       string  `protobuf:"bytes,38,opt,name=bank_pwd_flag,json=bankPwdFlag,proto3" json:"bank_pwd_flag,omitempty"`                     // 银行密码标志
	SecuPwdFlag       string  `protobuf:"bytes,39,opt,name=secu_pwd_flag,json=secuPwdFlag,proto3" json:"secu_pwd_flag,omitempty"`                     // 期货资金密码核对标志
	OperNo            string  `protobuf:"bytes,40,opt,name=oper_no,json=operNo,proto3" json:"oper_no,omitempty"`                                      // 交易柜员
	RequestID         int32   `protobuf:"varint,41,opt,name=request_iD,json=requestID,proto3" json:"request_iD,omitempty"`                            // 请求编号
	Tid               int32   `protobuf:"varint,42,opt,name=tid,proto3" json:"tid,omitempty"`                                                         // 交易ID
	TransferStatus    string  `protobuf:"bytes,43,opt,name=transfer_status,json=transferStatus,proto3" json:"transfer_status,omitempty"`              // 转账交易状态
	LongCustomerName  string  `protobuf:"bytes,44,opt,name=long_customer_name,json=longCustomerName,proto3" json:"long_customer_name,omitempty"`      // 长客户姓名
}

func (x *BankFutureTransferInfo) Reset() {
	*x = BankFutureTransferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thost_trader_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankFutureTransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankFutureTransferInfo) ProtoMessage() {}

func (x *BankFutureTransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thost_trader_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankFutureTransferInfo.ProtoReflect.Descriptor instead.
func (*BankFutureTransferInfo) Descriptor() ([]byte, []int) {
	return file_thost_trader_proto_rawDescGZIP(), []int{5}
}

func (x *BankFutureTransferInfo) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *BankFutureTransferInfo) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *BankFutureTransferInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *BankFutureTransferInfo) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *BankFutureTransferInfo) GetLastFragment() string {
	if x != nil {
		return x.LastFragment
	}
	return ""
}

func (x *BankFutureTransferInfo) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *BankFutureTransferInfo) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *BankFutureTransferInfo) GetIdCardType() string {
	if x != nil {
		return x.IdCardType
	}
	return ""
}

func (x *BankFutureTransferInfo) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *BankFutureTransferInfo) GetCustType() string {
	if x != nil {
		return x.CustType
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *BankFutureTransferInfo) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BankFutureTransferInfo) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *BankFutureTransferInfo) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *BankFutureTransferInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetVerifyCertNoFlag() string {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return ""
}

func (x *BankFutureTransferInfo) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *BankFutureTransferInfo) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *BankFutureTransferInfo) GetFeePayFlag() string {
	if x != nil {
		return x.FeePayFlag
	}
	return ""
}

func (x *BankFutureTransferInfo) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *BankFutureTransferInfo) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *BankFutureTransferInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BankFutureTransferInfo) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankAccType() string {
	if x != nil {
		return x.BankAccType
	}
	return ""
}

func (x *BankFutureTransferInfo) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankSecuAccType() string {
	if x != nil {
		return x.BankSecuAccType
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *BankFutureTransferInfo) GetBankPwdFlag() string {
	if x != nil {
		return x.BankPwdFlag
	}
	return ""
}

func (x *BankFutureTransferInfo) GetSecuPwdFlag() string {
	if x != nil {
		return x.SecuPwdFlag
	}
	return ""
}

func (x *BankFutureTransferInfo) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *BankFutureTransferInfo) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *BankFutureTransferInfo) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *BankFutureTransferInfo) GetTransferStatus() string {
	if x != nil {
		return x.TransferStatus
	}
	return ""
}

func (x *BankFutureTransferInfo) GetLongCustomerName() string {
	if x != nil {
		return x.LongCustomerName
	}
	return ""
}

var File_thost_trader_proto protoreflect.FileDescriptor

var file_thost_trader_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0xb5, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x74,
	0x67, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x4d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x43, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x18,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x44, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x70, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67,
	0x65, 0x4f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x66, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x4d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x75,
	0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x66, 0x75, 0x6e,
	0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x3b, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x73, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x73,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x23, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x41,
	0x6c, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x73, 0x70, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70,
	0x22, 0xb9, 0x0d, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f,
	0x73, 0x69, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x34, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x79, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x79, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x64,
	0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x27,
	0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x4c, 0x6f, 0x6e, 0x67,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x79, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x79, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x22, 0xce, 0x12, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x62, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x74, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x74, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x44,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x44,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x44, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x44, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x74, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69,
	0x44, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x44, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x44, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x17, 0x7a, 0x63, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x7a, 0x63, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x44, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69,
	0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x69, 0x44, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x31, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x32,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x33, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x33, 0x22, 0x98, 0x08,
	0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x69, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73,
	0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x44,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x44,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc5, 0x08, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x31, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x69, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x69,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44,
	0x22, 0xee, 0x0b, 0x0a, 0x16, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x69, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x6e,
	0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x44,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x13, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x63, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x44, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x12,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x44, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x5f, 0x61, 0x63, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x70, 0x77, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x5f, 0x70, 0x77, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x44, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x2a, 0x25, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x2d, 0x63, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x2f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_thost_trader_proto_rawDescOnce sync.Once
	file_thost_trader_proto_rawDescData = file_thost_trader_proto_rawDesc
)

func file_thost_trader_proto_rawDescGZIP() []byte {
	file_thost_trader_proto_rawDescOnce.Do(func() {
		file_thost_trader_proto_rawDescData = protoimpl.X.CompressGZIP(file_thost_trader_proto_rawDescData)
	})
	return file_thost_trader_proto_rawDescData
}

var file_thost_trader_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_thost_trader_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_thost_trader_proto_goTypes = []interface{}{
	(PosDateType)(0),               // 0: pb.PosDateType
	(*AccountInfo)(nil),            // 1: pb.AccountInfo
	(*Position)(nil),               // 2: pb.Position
	(*OrderInfo)(nil),              // 3: pb.OrderInfo
	(*OrderActionInfo)(nil),        // 4: pb.OrderActionInfo
	(*TradeInfo)(nil),              // 5: pb.TradeInfo
	(*BankFutureTransferInfo)(nil), // 6: pb.BankFutureTransferInfo
}
var file_thost_trader_proto_depIdxs = []int32{
	0, // 0: pb.Position.position_date:type_name -> pb.PosDateType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_thost_trader_proto_init() }
func file_thost_trader_proto_init() {
	if File_thost_trader_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_thost_trader_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thost_trader_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thost_trader_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thost_trader_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thost_trader_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_thost_trader_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankFutureTransferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thost_trader_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_thost_trader_proto_goTypes,
		DependencyIndexes: file_thost_trader_proto_depIdxs,
		EnumInfos:         file_thost_trader_proto_enumTypes,
		MessageInfos:      file_thost_trader_proto_msgTypes,
	}.Build()
	File_thost_trader_proto = out.File
	file_thost_trader_proto_rawDesc = nil
	file_thost_trader_proto_goTypes = nil
	file_thost_trader_proto_depIdxs = nil
}
