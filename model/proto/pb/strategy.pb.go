// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.6
// source: strategy.proto

// 指定proto版本

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Body    []byte `protobuf:"bytes,3,opt,name=body,proto3,oneof" json:"body,omitempty"` //可携带附加消息
}

func (x *Resp) Reset() {
	*x = Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resp) ProtoMessage() {}

func (x *Resp) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resp.ProtoReflect.Descriptor instead.
func (*Resp) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{0}
}

func (x *Resp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Resp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Resp) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type TradeInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"` //消息内容
}

func (x *TradeInsert) Reset() {
	*x = TradeInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInsert) ProtoMessage() {}

func (x *TradeInsert) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInsert.ProtoReflect.Descriptor instead.
func (*TradeInsert) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{1}
}

func (x *TradeInsert) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type TradeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentId string  `protobuf:"bytes,1,opt,name=InstrumentId,proto3" json:"InstrumentId,omitempty"`
	ExchangeId   string  `protobuf:"bytes,2,opt,name=ExchangeId,proto3" json:"ExchangeId,omitempty"`
	OrderSysID   string  `protobuf:"bytes,3,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	TriggerId    *string `protobuf:"bytes,4,opt,name=TriggerId,proto3,oneof" json:"TriggerId,omitempty"`
}

func (x *TradeAction) Reset() {
	*x = TradeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAction) ProtoMessage() {}

func (x *TradeAction) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAction.ProtoReflect.Descriptor instead.
func (*TradeAction) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{2}
}

func (x *TradeAction) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *TradeAction) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *TradeAction) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *TradeAction) GetTriggerId() string {
	if x != nil && x.TriggerId != nil {
		return *x.TriggerId
	}
	return ""
}

type StrategyNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"` //消息内容
}

func (x *StrategyNotify) Reset() {
	*x = StrategyNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyNotify) ProtoMessage() {}

func (x *StrategyNotify) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyNotify.ProtoReflect.Descriptor instead.
func (*StrategyNotify) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{3}
}

func (x *StrategyNotify) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type CycleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarType int32  `protobuf:"varint,1,opt,name=BarType,proto3" json:"BarType,omitempty"` //新周期
	Body    []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`        //消息内容
}

func (x *CycleInfo) Reset() {
	*x = CycleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_strategy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CycleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CycleInfo) ProtoMessage() {}

func (x *CycleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_strategy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CycleInfo.ProtoReflect.Descriptor instead.
func (*CycleInfo) Descriptor() ([]byte, []int) {
	return file_strategy_proto_rawDescGZIP(), []int{4}
}

func (x *CycleInfo) GetBarType() int32 {
	if x != nil {
		return x.BarType
	}
	return 0
}

func (x *CycleInfo) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_strategy_proto protoreflect.FileDescriptor

var file_strategy_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x22, 0x56, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x21, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0xa2, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x32, 0xc9, 0x01, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0b, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x74, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x30, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x32, 0x60, 0x0a, 0x0a, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x1a,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x2d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x2f, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_strategy_proto_rawDescOnce sync.Once
	file_strategy_proto_rawDescData = file_strategy_proto_rawDesc
)

func file_strategy_proto_rawDescGZIP() []byte {
	file_strategy_proto_rawDescOnce.Do(func() {
		file_strategy_proto_rawDescData = protoimpl.X.CompressGZIP(file_strategy_proto_rawDescData)
	})
	return file_strategy_proto_rawDescData
}

var file_strategy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_strategy_proto_goTypes = []interface{}{
	(*Resp)(nil),           // 0: pb.Resp
	(*TradeInsert)(nil),    // 1: pb.TradeInsert
	(*TradeAction)(nil),    // 2: pb.TradeAction
	(*StrategyNotify)(nil), // 3: pb.StrategyNotify
	(*CycleInfo)(nil),      // 4: pb.CycleInfo
}
var file_strategy_proto_depIdxs = []int32{
	3, // 0: pb.GuideStrategy.TickNotify:input_type -> pb.StrategyNotify
	4, // 1: pb.GuideStrategy.CycleNotify:input_type -> pb.CycleInfo
	3, // 2: pb.GuideStrategy.OrderRtnNotify:input_type -> pb.StrategyNotify
	3, // 3: pb.GuideStrategy.OrderTradeNotify:input_type -> pb.StrategyNotify
	1, // 4: pb.GuideTrade.OrderInsert:input_type -> pb.TradeInsert
	2, // 5: pb.GuideTrade.OrderAction:input_type -> pb.TradeAction
	0, // 6: pb.GuideStrategy.TickNotify:output_type -> pb.Resp
	0, // 7: pb.GuideStrategy.CycleNotify:output_type -> pb.Resp
	0, // 8: pb.GuideStrategy.OrderRtnNotify:output_type -> pb.Resp
	0, // 9: pb.GuideStrategy.OrderTradeNotify:output_type -> pb.Resp
	0, // 10: pb.GuideTrade.OrderInsert:output_type -> pb.Resp
	0, // 11: pb.GuideTrade.OrderAction:output_type -> pb.Resp
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_strategy_proto_init() }
func file_strategy_proto_init() {
	if File_strategy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_strategy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_strategy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CycleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_strategy_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_strategy_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_strategy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_strategy_proto_goTypes,
		DependencyIndexes: file_strategy_proto_depIdxs,
		MessageInfos:      file_strategy_proto_msgTypes,
	}.Build()
	File_strategy_proto = out.File
	file_strategy_proto_rawDesc = nil
	file_strategy_proto_goTypes = nil
	file_strategy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GuideStrategyClient is the client API for GuideStrategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuideStrategyClient interface {
	TickNotify(ctx context.Context, in *StrategyNotify, opts ...grpc.CallOption) (*Resp, error)
	CycleNotify(ctx context.Context, in *CycleInfo, opts ...grpc.CallOption) (*Resp, error)
	OrderRtnNotify(ctx context.Context, in *StrategyNotify, opts ...grpc.CallOption) (*Resp, error)
	OrderTradeNotify(ctx context.Context, in *StrategyNotify, opts ...grpc.CallOption) (*Resp, error)
}

type guideStrategyClient struct {
	cc grpc.ClientConnInterface
}

func NewGuideStrategyClient(cc grpc.ClientConnInterface) GuideStrategyClient {
	return &guideStrategyClient{cc}
}

func (c *guideStrategyClient) TickNotify(ctx context.Context, in *StrategyNotify, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/pb.GuideStrategy/TickNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideStrategyClient) CycleNotify(ctx context.Context, in *CycleInfo, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/pb.GuideStrategy/CycleNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideStrategyClient) OrderRtnNotify(ctx context.Context, in *StrategyNotify, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/pb.GuideStrategy/OrderRtnNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideStrategyClient) OrderTradeNotify(ctx context.Context, in *StrategyNotify, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/pb.GuideStrategy/OrderTradeNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuideStrategyServer is the server API for GuideStrategy service.
type GuideStrategyServer interface {
	TickNotify(context.Context, *StrategyNotify) (*Resp, error)
	CycleNotify(context.Context, *CycleInfo) (*Resp, error)
	OrderRtnNotify(context.Context, *StrategyNotify) (*Resp, error)
	OrderTradeNotify(context.Context, *StrategyNotify) (*Resp, error)
}

// UnimplementedGuideStrategyServer can be embedded to have forward compatible implementations.
type UnimplementedGuideStrategyServer struct {
}

func (*UnimplementedGuideStrategyServer) TickNotify(context.Context, *StrategyNotify) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickNotify not implemented")
}
func (*UnimplementedGuideStrategyServer) CycleNotify(context.Context, *CycleInfo) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CycleNotify not implemented")
}
func (*UnimplementedGuideStrategyServer) OrderRtnNotify(context.Context, *StrategyNotify) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderRtnNotify not implemented")
}
func (*UnimplementedGuideStrategyServer) OrderTradeNotify(context.Context, *StrategyNotify) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderTradeNotify not implemented")
}

func RegisterGuideStrategyServer(s *grpc.Server, srv GuideStrategyServer) {
	s.RegisterService(&_GuideStrategy_serviceDesc, srv)
}

func _GuideStrategy_TickNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideStrategyServer).TickNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuideStrategy/TickNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideStrategyServer).TickNotify(ctx, req.(*StrategyNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideStrategy_CycleNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CycleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideStrategyServer).CycleNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuideStrategy/CycleNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideStrategyServer).CycleNotify(ctx, req.(*CycleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideStrategy_OrderRtnNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideStrategyServer).OrderRtnNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuideStrategy/OrderRtnNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideStrategyServer).OrderRtnNotify(ctx, req.(*StrategyNotify))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideStrategy_OrderTradeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyNotify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideStrategyServer).OrderTradeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuideStrategy/OrderTradeNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideStrategyServer).OrderTradeNotify(ctx, req.(*StrategyNotify))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideStrategy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GuideStrategy",
	HandlerType: (*GuideStrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TickNotify",
			Handler:    _GuideStrategy_TickNotify_Handler,
		},
		{
			MethodName: "CycleNotify",
			Handler:    _GuideStrategy_CycleNotify_Handler,
		},
		{
			MethodName: "OrderRtnNotify",
			Handler:    _GuideStrategy_OrderRtnNotify_Handler,
		},
		{
			MethodName: "OrderTradeNotify",
			Handler:    _GuideStrategy_OrderTradeNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategy.proto",
}

// GuideTradeClient is the client API for GuideTrade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuideTradeClient interface {
	OrderInsert(ctx context.Context, in *TradeInsert, opts ...grpc.CallOption) (*Resp, error)
	OrderAction(ctx context.Context, in *TradeAction, opts ...grpc.CallOption) (*Resp, error)
}

type guideTradeClient struct {
	cc grpc.ClientConnInterface
}

func NewGuideTradeClient(cc grpc.ClientConnInterface) GuideTradeClient {
	return &guideTradeClient{cc}
}

func (c *guideTradeClient) OrderInsert(ctx context.Context, in *TradeInsert, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/pb.GuideTrade/OrderInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guideTradeClient) OrderAction(ctx context.Context, in *TradeAction, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/pb.GuideTrade/OrderAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuideTradeServer is the server API for GuideTrade service.
type GuideTradeServer interface {
	OrderInsert(context.Context, *TradeInsert) (*Resp, error)
	OrderAction(context.Context, *TradeAction) (*Resp, error)
}

// UnimplementedGuideTradeServer can be embedded to have forward compatible implementations.
type UnimplementedGuideTradeServer struct {
}

func (*UnimplementedGuideTradeServer) OrderInsert(context.Context, *TradeInsert) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderInsert not implemented")
}
func (*UnimplementedGuideTradeServer) OrderAction(context.Context, *TradeAction) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAction not implemented")
}

func RegisterGuideTradeServer(s *grpc.Server, srv GuideTradeServer) {
	s.RegisterService(&_GuideTrade_serviceDesc, srv)
}

func _GuideTrade_OrderInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeInsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideTradeServer).OrderInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuideTrade/OrderInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideTradeServer).OrderInsert(ctx, req.(*TradeInsert))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuideTrade_OrderAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuideTradeServer).OrderAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GuideTrade/OrderAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuideTradeServer).OrderAction(ctx, req.(*TradeAction))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuideTrade_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GuideTrade",
	HandlerType: (*GuideTradeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderInsert",
			Handler:    _GuideTrade_OrderInsert_Handler,
		},
		{
			MethodName: "OrderAction",
			Handler:    _GuideTrade_OrderAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strategy.proto",
}
