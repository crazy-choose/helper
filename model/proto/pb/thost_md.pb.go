// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.6
// source: thost_md.proto

// 指定proto版本

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TickInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay         string  `protobuf:"bytes,1,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                             // 交易日
	InstrumentId       string  `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                       // 合约代码
	ExchangeId         string  `protobuf:"bytes,3,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`                             // 交易所代码
	ExchangeInstId     string  `protobuf:"bytes,4,opt,name=exchange_inst_id,json=exchangeInstId,proto3" json:"exchange_inst_id,omitempty"`               // 合约在交易所的代码
	LastPrice          float64 `protobuf:"fixed64,5,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`                              // 最新价
	PreSettlementPrice float64 `protobuf:"fixed64,6,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"` // 上次结算价
	PreClosePrice      float64 `protobuf:"fixed64,7,opt,name=pre_close_price,json=preClosePrice,proto3" json:"pre_close_price,omitempty"`                // 昨收盘
	PreOpenInterest    float64 `protobuf:"fixed64,8,opt,name=pre_open_interest,json=preOpenInterest,proto3" json:"pre_open_interest,omitempty"`          // 昨持仓量
	OpenPrice          float64 `protobuf:"fixed64,9,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`                              // 今开盘
	ClosePrice         float64 `protobuf:"fixed64,10,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`                          // 今收盘（注意：原注释有 '-'）
	SettlementPrice    float64 `protobuf:"fixed64,11,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`           // 本次结算价
	HighestPrice       float64 `protobuf:"fixed64,12,opt,name=highest_price,json=highestPrice,proto3" json:"highest_price,omitempty"`                    // 最高价
	LowestPrice        float64 `protobuf:"fixed64,13,opt,name=lowest_price,json=lowestPrice,proto3" json:"lowest_price,omitempty"`                       // 最低价
	Volume             int32   `protobuf:"varint,14,opt,name=volume,proto3" json:"volume,omitempty"`                                                     // 数量
	Turnover           float64 `protobuf:"fixed64,15,opt,name=turnover,proto3" json:"turnover,omitempty"`                                                // 成交金额
	OpenInterest       float64 `protobuf:"fixed64,16,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`                    // 持仓量
	UpdateTime         string  `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                            // 最后修改时间
	UpdateMillisec     int32   `protobuf:"varint,18,opt,name=update_millisec,json=updateMillisec,proto3" json:"update_millisec,omitempty"`               // 最后修改毫秒
	AveragePrice       float64 `protobuf:"fixed64,19,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`                    // 当日均价
	ActionDay          string  `protobuf:"bytes,20,opt,name=action_day,json=actionDay,proto3" json:"action_day,omitempty"`                               // 业务日期
	UpperLimitPrice    float64 `protobuf:"fixed64,21,opt,name=upper_limit_price,json=upperLimitPrice,proto3" json:"upper_limit_price,omitempty"`         // 涨停板价
	LowerLimitPrice    float64 `protobuf:"fixed64,22,opt,name=lower_limit_price,json=lowerLimitPrice,proto3" json:"lower_limit_price,omitempty"`         // 跌停板价
	BidPrice_1         float64 `protobuf:"fixed64,23,opt,name=bid_price_1,json=bidPrice1,proto3" json:"bid_price_1,omitempty"`                           // 申买价一
	BidVolume_1        int32   `protobuf:"varint,24,opt,name=bid_volume_1,json=bidVolume1,proto3" json:"bid_volume_1,omitempty"`                         // 申买量一
	AskPrice_1         float64 `protobuf:"fixed64,25,opt,name=ask_price_1,json=askPrice1,proto3" json:"ask_price_1,omitempty"`                           // 申卖价一
	AskVolume_1        int32   `protobuf:"varint,26,opt,name=ask_volume_1,json=askVolume1,proto3" json:"ask_volume_1,omitempty"`                         // 申卖量一
	BidPrice_2         float64 `protobuf:"fixed64,27,opt,name=bid_price_2,json=bidPrice2,proto3" json:"bid_price_2,omitempty"`                           // 申买价二
	BidVolume_2        int32   `protobuf:"varint,28,opt,name=bid_volume_2,json=bidVolume2,proto3" json:"bid_volume_2,omitempty"`                         // 申买量二
	AskPrice_2         float64 `protobuf:"fixed64,29,opt,name=ask_price_2,json=askPrice2,proto3" json:"ask_price_2,omitempty"`                           // 申卖价二
	AskVolume_2        int32   `protobuf:"varint,30,opt,name=ask_volume_2,json=askVolume2,proto3" json:"ask_volume_2,omitempty"`                         // 申卖量二
	BidPrice_3         float64 `protobuf:"fixed64,31,opt,name=bid_price_3,json=bidPrice3,proto3" json:"bid_price_3,omitempty"`                           // 申买价三
	BidVolume_3        int32   `protobuf:"varint,32,opt,name=bid_volume_3,json=bidVolume3,proto3" json:"bid_volume_3,omitempty"`                         // 申买量三
	AskPrice_3         float64 `protobuf:"fixed64,33,opt,name=ask_price_3,json=askPrice3,proto3" json:"ask_price_3,omitempty"`                           // 申卖价三
	AskVolume_3        int32   `protobuf:"varint,34,opt,name=ask_volume_3,json=askVolume3,proto3" json:"ask_volume_3,omitempty"`                         // 申卖量三
	BidPrice_4         float64 `protobuf:"fixed64,35,opt,name=bid_price_4,json=bidPrice4,proto3" json:"bid_price_4,omitempty"`                           // 申买价四
	BidVolume_4        int32   `protobuf:"varint,36,opt,name=bid_volume_4,json=bidVolume4,proto3" json:"bid_volume_4,omitempty"`                         // 申买量四
	AskPrice_4         float64 `protobuf:"fixed64,37,opt,name=ask_price_4,json=askPrice4,proto3" json:"ask_price_4,omitempty"`                           // 申卖价四
	AskVolume_4        int32   `protobuf:"varint,38,opt,name=ask_volume_4,json=askVolume4,proto3" json:"ask_volume_4,omitempty"`                         // 申卖量四
	BidPrice_5         float64 `protobuf:"fixed64,39,opt,name=bid_price_5,json=bidPrice5,proto3" json:"bid_price_5,omitempty"`                           // 申买价五
	BidVolume_5        int32   `protobuf:"varint,40,opt,name=bid_volume_5,json=bidVolume5,proto3" json:"bid_volume_5,omitempty"`                         // 申买量五
	AskPrice_5         float64 `protobuf:"fixed64,41,opt,name=ask_price_5,json=askPrice5,proto3" json:"ask_price_5,omitempty"`                           // 申卖价五
	AskVolume_5        int32   `protobuf:"varint,42,opt,name=ask_volume_5,json=askVolume5,proto3" json:"ask_volume_5,omitempty"`                         // 申卖量五
	PreDelta           float64 `protobuf:"fixed64,43,opt,name=pre_delta,json=preDelta,proto3" json:"pre_delta,omitempty"`                                // 昨虚实度
	CurrDelta          float64 `protobuf:"fixed64,44,opt,name=curr_delta,json=currDelta,proto3" json:"curr_delta,omitempty"`                             // 今虚实度
	BandingUpperPrice  float64 `protobuf:"fixed64,45,opt,name=banding_upper_price,json=bandingUpperPrice,proto3" json:"banding_upper_price,omitempty"`   // 上带价
	BandingLowerPrice  float64 `protobuf:"fixed64,46,opt,name=banding_lower_price,json=bandingLowerPrice,proto3" json:"banding_lower_price,omitempty"`   // 下带价
	Analyze            string  `protobuf:"bytes,47,opt,name=analyze,proto3" json:"analyze,omitempty"`                                                    // 变动方向|多开-空平-双开
}

func (x *TickInfo) Reset() {
	*x = TickInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_thost_md_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickInfo) ProtoMessage() {}

func (x *TickInfo) ProtoReflect() protoreflect.Message {
	mi := &file_thost_md_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickInfo.ProtoReflect.Descriptor instead.
func (*TickInfo) Descriptor() ([]byte, []int) {
	return file_thost_md_proto_rawDescGZIP(), []int{0}
}

func (x *TickInfo) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *TickInfo) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *TickInfo) GetExchangeId() string {
	if x != nil {
		return x.ExchangeId
	}
	return ""
}

func (x *TickInfo) GetExchangeInstId() string {
	if x != nil {
		return x.ExchangeInstId
	}
	return ""
}

func (x *TickInfo) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *TickInfo) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *TickInfo) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *TickInfo) GetPreOpenInterest() float64 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *TickInfo) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *TickInfo) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *TickInfo) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *TickInfo) GetHighestPrice() float64 {
	if x != nil {
		return x.HighestPrice
	}
	return 0
}

func (x *TickInfo) GetLowestPrice() float64 {
	if x != nil {
		return x.LowestPrice
	}
	return 0
}

func (x *TickInfo) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TickInfo) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *TickInfo) GetOpenInterest() float64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *TickInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *TickInfo) GetUpdateMillisec() int32 {
	if x != nil {
		return x.UpdateMillisec
	}
	return 0
}

func (x *TickInfo) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *TickInfo) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

func (x *TickInfo) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *TickInfo) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *TickInfo) GetBidPrice_1() float64 {
	if x != nil {
		return x.BidPrice_1
	}
	return 0
}

func (x *TickInfo) GetBidVolume_1() int32 {
	if x != nil {
		return x.BidVolume_1
	}
	return 0
}

func (x *TickInfo) GetAskPrice_1() float64 {
	if x != nil {
		return x.AskPrice_1
	}
	return 0
}

func (x *TickInfo) GetAskVolume_1() int32 {
	if x != nil {
		return x.AskVolume_1
	}
	return 0
}

func (x *TickInfo) GetBidPrice_2() float64 {
	if x != nil {
		return x.BidPrice_2
	}
	return 0
}

func (x *TickInfo) GetBidVolume_2() int32 {
	if x != nil {
		return x.BidVolume_2
	}
	return 0
}

func (x *TickInfo) GetAskPrice_2() float64 {
	if x != nil {
		return x.AskPrice_2
	}
	return 0
}

func (x *TickInfo) GetAskVolume_2() int32 {
	if x != nil {
		return x.AskVolume_2
	}
	return 0
}

func (x *TickInfo) GetBidPrice_3() float64 {
	if x != nil {
		return x.BidPrice_3
	}
	return 0
}

func (x *TickInfo) GetBidVolume_3() int32 {
	if x != nil {
		return x.BidVolume_3
	}
	return 0
}

func (x *TickInfo) GetAskPrice_3() float64 {
	if x != nil {
		return x.AskPrice_3
	}
	return 0
}

func (x *TickInfo) GetAskVolume_3() int32 {
	if x != nil {
		return x.AskVolume_3
	}
	return 0
}

func (x *TickInfo) GetBidPrice_4() float64 {
	if x != nil {
		return x.BidPrice_4
	}
	return 0
}

func (x *TickInfo) GetBidVolume_4() int32 {
	if x != nil {
		return x.BidVolume_4
	}
	return 0
}

func (x *TickInfo) GetAskPrice_4() float64 {
	if x != nil {
		return x.AskPrice_4
	}
	return 0
}

func (x *TickInfo) GetAskVolume_4() int32 {
	if x != nil {
		return x.AskVolume_4
	}
	return 0
}

func (x *TickInfo) GetBidPrice_5() float64 {
	if x != nil {
		return x.BidPrice_5
	}
	return 0
}

func (x *TickInfo) GetBidVolume_5() int32 {
	if x != nil {
		return x.BidVolume_5
	}
	return 0
}

func (x *TickInfo) GetAskPrice_5() float64 {
	if x != nil {
		return x.AskPrice_5
	}
	return 0
}

func (x *TickInfo) GetAskVolume_5() int32 {
	if x != nil {
		return x.AskVolume_5
	}
	return 0
}

func (x *TickInfo) GetPreDelta() float64 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *TickInfo) GetCurrDelta() float64 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

func (x *TickInfo) GetBandingUpperPrice() float64 {
	if x != nil {
		return x.BandingUpperPrice
	}
	return 0
}

func (x *TickInfo) GetBandingLowerPrice() float64 {
	if x != nil {
		return x.BandingLowerPrice
	}
	return 0
}

func (x *TickInfo) GetAnalyze() string {
	if x != nil {
		return x.Analyze
	}
	return ""
}

var File_thost_md_proto protoreflect.FileDescriptor

var file_thost_md_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x22, 0xfc, 0x0c, 0x0a, 0x08, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x77, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c,
	0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x61,
	0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x31, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1e, 0x0a,
	0x0b, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x32, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12,
	0x1e, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x32, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12,
	0x20, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x32, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x33,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x33, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x33, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x33, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x33, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x33, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x34, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x34, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x69, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x34, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x34, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x35, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x35, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x35, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x20, 0x0a, 0x0c, 0x61,
	0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x35, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x63, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x72, 0x61, 0x7a, 0x79, 0x2d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x2f, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_thost_md_proto_rawDescOnce sync.Once
	file_thost_md_proto_rawDescData = file_thost_md_proto_rawDesc
)

func file_thost_md_proto_rawDescGZIP() []byte {
	file_thost_md_proto_rawDescOnce.Do(func() {
		file_thost_md_proto_rawDescData = protoimpl.X.CompressGZIP(file_thost_md_proto_rawDescData)
	})
	return file_thost_md_proto_rawDescData
}

var file_thost_md_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_thost_md_proto_goTypes = []interface{}{
	(*TickInfo)(nil), // 0: pb.TickInfo
}
var file_thost_md_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_thost_md_proto_init() }
func file_thost_md_proto_init() {
	if File_thost_md_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_thost_md_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_thost_md_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_thost_md_proto_goTypes,
		DependencyIndexes: file_thost_md_proto_depIdxs,
		MessageInfos:      file_thost_md_proto_msgTypes,
	}.Build()
	File_thost_md_proto = out.File
	file_thost_md_proto_rawDesc = nil
	file_thost_md_proto_goTypes = nil
	file_thost_md_proto_depIdxs = nil
}
